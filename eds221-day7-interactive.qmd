---
title: "EDS 221 Day 7 Interactive Session"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Data Wrangling Refresher

1.  Starting from penguins, write a single piped sequence in which you:
    1.  only include penguins at Dream and Biscoe islands
    2.  Remove the year and sex variables
    3.  Add a new column body_mass_kg with penguin mass converted from g to kg
    4.  Rename the island variable to location

```{r}
ex_1 <- penguins %>% 
  filter(island %in% c("Dream", "Biscoe")) %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  rename(location = island)
```

2.  Starting form penguins write a single piped sequence:
    -   Limit to Adelie penguins
    -   Remove any observations where flipper_length_mm is NA (!is.na() or drop_na())
    -   group the data by sex
    -   Create a summary table that contains the mean, sd, and sample size of flipper lengths for male and female adelie penguins

```{r}
ex_2 <- penguins %>% 
  filter(species == "Adelie") %>%
  drop_na(flipper_length_mm) %>%
  group_by(sex) %>%
  summarize(flipper_mean = mean(flipper_length_mm), 
            flipper_sd = sd(flipper_length_mm), 
            sample_size = n())
```

```{r}
penguins %>% 
  group_by(species, island, sex) %>% 
  summarize(sample_size = n())

# count does the same as above! wraps together group_by + summarize + n() to get counts of observations.
penguins %>% 
  count(species, island, sex)
```

```{r}
# install datapasta -> copy data table to clipboard -> Addins -> Paste as data.frame
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

## Joining

Full join:

```{r}
full_join_example <- full_join(animals, sites)
```

Left join:

```{r}
left_join_example <- left_join(animals, sites)
```

inner join

```{r}
inner_join_example <- inner_join(animals, sites)
```

## Date-times with lubridate()

ymd: if date is in year-month-day

mdy: if date is in month-day-year

dmy: if date is in day-month-year

```{r}
my_date_1 <- lubridate::mdy("03-15-1998")

class(my_date_1)

my_date_2 <- lubridate::mdy("11/7/2003")

# character representation of dates

m_date_3 <- lubridate::dmy("08-Jun-1974")

my_date_4 <- lubridate::ymd(20041003)
```

Can we break the lubridate parsing functions?

```{r}
my_date_5 <- lubridate::dmy("06-20-2001")
```

Adding times to our dates

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
```

Parse June 2, 1982 at 4pm UTC (16:00) as a date in R

```{r}
time_2 <- lubridate::mdy_hm("June 2, 1982 4:00PM")

```

<https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>

use the "TZ identifier" to tell it the time zone

```{r}
with_tz(time_2, tzone = "America/Los_Angeles")
```

```{r}
with_tz(time_2, "Egypt")
with_tz(time_2, "Europe/Paris")
```

```{r}
now <- with_tz(Sys.time(), "Europe/Belgrade")
```

Access different parts of date-times

```{r}
lubridate::day(now)
```

```{r}
# week of the year
lubridate::week(now)
```

```{r}
lubridate::minute(now)

lubridate::second(now)

lubridate::month(now)

lubridate::year(now)
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "Oct 18, 2007", "Feb 12 2003", "Feb 14 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 24, 18, 11)
) # R thinks date is a character right now 
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>%  # add column with only month number
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm))
```

## Strings with stringr

Use str_detect to detect a string pattern

```{r}
my_string <- "Teddy loves salmon and kibble and toys."
```

```{r}
str_detect(my_string, pattern = "kibble")
```

```{r}
str_detect(my_string, "hot weather")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "Taco salad", "super-burrito")
```

```{r}
str_detect(my_string_2, "taco") # case sensitive, can use "tolower" so that everything is lower case
```

```{r}
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

```{r}
starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

str_trim to get rid of leading and trailing white space

str_squish to get rid of leading and trailing white space AND excess interior white space

```{r}
my_string_3 <- "    Hi my  name    is teddy !! !    "
```

```{r}
str_trim(my_string_3)
```

```{r}
str_squish(my_string_3)
```

Case conversion

```{r}
str_to_lower(my_string_3)
```

```{r}
str_to_upper(my_string_3)
```

```{r}
str_to_title(my_string_3)
```

```{r}
str_to_sentence(my_string_3)
```

```{r}
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
